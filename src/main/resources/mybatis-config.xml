<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

    <properties>
        <property name="driver" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test?serverTimezone=UTC" />
        <property name="username" value="root" />
        <property name="password" value="" />
    </properties>

    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>
    <!--
    【typeAliases 类型命名】
    -->
    <typeAliases>
        <!-- <typeAlias alias="Author" type="domain.blog.Author"/> -->

        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean-->
        <package name="org.demo"/>
    </typeAliases>



    <!--
    【typeHandlers 类型处理器】
    -->
    <!-- 实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个 JDBC 类型。 -->
    <typeHandlers>
        <!--<typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>-->
    </typeHandlers>



    <!-- 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，
        要么在参数映射存在的时候通过参数构造方法来实例化。
        如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现，继承 DefaultObjectFactory 。-->
    <!--
    <objectFactory type="org.mybatis.example.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>
    -->

    <environments default="development">
        <environment id="development">

            <!--【1】在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）-->
            <transactionManager type="JDBC"/>

            <!--【2】有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）-->
            <!--     MyBatis的数据源并不是必须的，为了方便使用延迟加载，数据源才是必须的。-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>


    <!-- 【1】这里的 DB_VENDOR 会通过 DatabaseMetaData#getDatabaseProductName() -->
    <!--      返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。 -->
    <!-- 【2】通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider： -->
    <!--<databaseIdProvider type="DB_VENDOR">-->
        <!--<property name="SQL Server" value="sqlserver"/>-->
        <!--<property name="DB2" value="db2"/>-->
        <!--<property name="Oracle" value="oracle" />-->
        <!--<property name="MySQL" value="mysql" />-->
    <!--</databaseIdProvider>-->

    <mappers>
        <!-- Using classpath relative resources -->
        <!--<mapper resource="org/demo/mapper/BlogMapper.xml"/>-->

        <!-- Using url fully qualified paths -->
        <!--<mapper url="file:///var/mappers/AuthorMapper.xml"/>-->

        <!-- Using mapper interface classes -->
        <!--<mapper class="org.mybatis.builder.AuthorMapper"/>-->

        <!-- Register all interfaces in a package as mappers -->
        <package name="org.demo.mapper"/>
    </mappers>




</configuration>